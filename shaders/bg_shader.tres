[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://bxtj0hvu04viu"]

[sub_resource type="FastNoiseLite" id="FastNoiseLite_0ru88"]
noise_type = 2
fractal_type = 0
fractal_octaves = 1
cellular_distance_function = 3
cellular_jitter = 0.6

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_0ru88"]
width = 2048
height = 2048
invert = true
noise = SubResource("FastNoiseLite_0ru88")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_phihi"]
output_port_for_preview = 0
texture = SubResource("NoiseTexture2D_0ru88")

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_0ru88"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.985, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(1, 1, 1), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeUVFunc" id="VisualShaderNodeUVFunc_0ru88"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_phihi"]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_cgugh"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_ud8al"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0)]
op_type = 0
function = 18

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_taxxb"]
default_input_values = [0, 0.0, 1, 0.005]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_0ru88"]
input_name = "uv"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D tex_frg_21;



void fragment() {
// Input:31
	vec2 n_out31p0 = UV;


// UVFunc:26
	vec2 n_in26p1 = vec2(1.00000, 1.00000);
	vec2 n_in26p2 = vec2(0.00000, 0.00000);
	vec2 n_out26p0 = n_in26p2 * n_in26p1 + n_out31p0;


// VectorOp:28
	vec2 n_in28p1 = vec2(0.00000, 0.00000);
	vec2 n_out28p0 = n_out26p0 + n_in28p1;


// VectorFunc:29
	vec2 n_out29p0 = fract(n_out28p0);


// Texture2D:21
	vec4 n_out21p0 = texture(tex_frg_21, n_out29p0);


	vec3 n_out25p0;
// If:25
	float n_in25p1 = 0.98500;
	float n_in25p2 = 0.00001;
	vec3 n_in25p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in25p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in25p5 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out21p0.x - n_in25p1) < n_in25p2)
	{
		n_out25p0 = n_in25p3;
	}
	else if(n_out21p0.x < n_in25p1)
	{
		n_out25p0 = n_in25p5;
	}
	else
	{
		n_out25p0 = n_in25p4;
	}


// Output:0
	COLOR.rgb = n_out25p0;


}
"
graph_offset = Vector2(-2321.6, 121.167)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-1100, 140)
nodes/fragment/21/node = SubResource("VisualShaderNodeTexture_phihi")
nodes/fragment/21/position = Vector2(-1820, 160)
nodes/fragment/25/node = SubResource("VisualShaderNodeIf_0ru88")
nodes/fragment/25/position = Vector2(-1440, 80)
nodes/fragment/26/node = SubResource("VisualShaderNodeUVFunc_0ru88")
nodes/fragment/26/position = Vector2(-2700, -120)
nodes/fragment/27/node = SubResource("VisualShaderNodeInput_phihi")
nodes/fragment/27/position = Vector2(-3000, 360)
nodes/fragment/28/node = SubResource("VisualShaderNodeVectorOp_cgugh")
nodes/fragment/28/position = Vector2(-2400, 120)
nodes/fragment/29/node = SubResource("VisualShaderNodeVectorFunc_ud8al")
nodes/fragment/29/position = Vector2(-2160, 180)
nodes/fragment/30/node = SubResource("VisualShaderNodeFloatOp_taxxb")
nodes/fragment/30/position = Vector2(-2680, 460)
nodes/fragment/31/node = SubResource("VisualShaderNodeInput_0ru88")
nodes/fragment/31/position = Vector2(-3020, 80)
nodes/fragment/connections = PackedInt32Array(21, 0, 25, 0, 25, 0, 0, 0, 28, 0, 29, 0, 29, 0, 21, 0, 27, 0, 30, 0, 31, 0, 26, 0, 26, 0, 28, 0)
